// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Generates content ideas for educational institutions based on user input.
 *
 * - generateContentIdeas - A function that generates content ideas.
 * - GenerateContentIdeasInput - The input type for the generateContentIdeas function.
 * - GenerateContentIdeasOutput - The return type for the generateContentIdeas function.
 */

import {ai} from '@/ai/genkit';
import type { Status } from '@/types/common';
import {
  GenerateContentIdeasInputSchema,
  GenerateContentIdeasOutputSchema,
  GenerateContentIdeasPromptOutputSchema,
  ContentIdeaWithStatusSchema, // Used for mapping
} from '@/ai/schemas/content-ideas-schemas';
import type { 
  GenerateContentIdeasInput as GenerateContentIdeasInputType, 
  GenerateContentIdeasOutput as GenerateContentIdeasOutputType,
  ContentIdeaWithStatus as ContentIdeaWithStatusType,
} from '@/ai/schemas/content-ideas-schemas';


export type GenerateContentIdeasInput = GenerateContentIdeasInputType;
export type GenerateContentIdeasOutput = GenerateContentIdeasOutputType;
export type ContentIdeaWithStatus = ContentIdeaWithStatusType;


export async function generateContentIdeas(
  input: GenerateContentIdeasInput
): Promise<GenerateContentIdeasOutput> {
  return generateContentIdeasFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateContentIdeasPrompt',
  input: {schema: GenerateContentIdeasInputSchema},
  output: {schema: GenerateContentIdeasPromptOutputSchema}, // AI generates strings
  prompt: `You are a creative content strategist specializing in the educational sector. Generate content ideas for {{institutionName}}, a {{institutionType}}, targeting {{targetAudience}}. The institution offers the following programs: {{programsOffered}}. Its unique selling points are: {{uniqueSellingPoints}}. Please provide a list of content ideas that will resonate with the target audience. Ensure each idea is a distinct string in the array. Aim for a list of up to 10 diverse ideas.`,
});

const generateContentIdeasFlow = ai.defineFlow(
  {
    name: 'generateContentIdeasFlow',
    inputSchema: GenerateContentIdeasInputSchema,
    outputSchema: GenerateContentIdeasOutputSchema, // Flow output schema includes status
  },
  async (input): Promise<GenerateContentIdeasOutput> => {
    const {output} = await prompt(input);
    if (output && output.contentIdeas) {
      let ideasWithStatus: ContentIdeaWithStatus[] = output.contentIdeas.map((ideaText) => ({
        id: crypto.randomUUID(),
        text: ideaText,
        status: 'pending' as Status,
        expandedDetails: undefined,
        isExpanding: false,
      }));
      if (ideasWithStatus.length > 10) {
        ideasWithStatus = ideasWithStatus.slice(0, 10); 
      }
      return { contentIdeas: ideasWithStatus };
    }
    return { contentIdeas: [] }; // Fallback or error case
  }
);

