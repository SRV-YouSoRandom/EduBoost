// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Generates content ideas for educational institutions based on user input.
 *
 * - generateContentIdeas - A function that generates content ideas.
 * - GenerateContentIdeasInput - The input type for the generateContentIdeas function.
 * - GenerateContentIdeasOutput - The return type for the generateContentIdeas function.
 */

import {ai} from '@/ai/genkit';
import type { Status } from '@/types/common';
import {
  GenerateContentIdeasInputSchema,
  GenerateContentIdeasOutputSchema,
  GenerateContentIdeasPromptOutputSchema,
  ContentIdeaWithStatusSchema, // Used for mapping
} from '@/ai/schemas/content-ideas-schemas';
import type { 
  GenerateContentIdeasInput as GenerateContentIdeasInputType, 
  GenerateContentIdeasOutput as GenerateContentIdeasOutputType,
  ContentIdeaWithStatus as ContentIdeaWithStatusType,
} from '@/ai/schemas/content-ideas-schemas';


export type GenerateContentIdeasInput = GenerateContentIdeasInputType;
export type GenerateContentIdeasOutput = GenerateContentIdeasOutputType;
export type ContentIdeaWithStatus = ContentIdeaWithStatusType;


export async function generateContentIdeas(
  input: GenerateContentIdeasInput
): Promise<GenerateContentIdeasOutput> {
  return generateContentIdeasFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateContentIdeasPrompt',
  input: {schema: GenerateContentIdeasInputSchema},
  output: {schema: GenerateContentIdeasPromptOutputSchema}, // AI generates strings
  prompt: `You are a creative content strategist specializing in the educational sector.
  Your goal is to generate a diverse and practical list of up to 10 content ideas for {{institutionName}}, a {{institutionType}}, targeting {{targetAudience}}.
  Consider the institution's programs: {{programsOffered}} and its unique selling points: {{uniqueSellingPoints}}.

  Instructions:
  1.  **Diversity of Formats:** Suggest ideas that can be adapted for various formats like:
      *   Blog posts (e.g., "Top 5 Benefits of Our [Program Name] Program")
      *   Short videos (e.g., "A Day in the Life of a {{institutionType}} Student")
      *   Infographics (e.g., "Career Paths After Graduating from {{institutionName}}")
      *   Social media series (e.g., "Faculty Fridays: Meet Our Expert Instructors")
      *   Webinar/Workshop topics (e.g., "Navigating the Admissions Process for {{targetAudience}}")
      *   Podcast episodes (e.g., "Alumni Success Stories from {{institutionName}}")
      *   Interactive quizzes (e.g., "Which of Our Programs is Right for You?")
  2.  **Target Audience Relevance:** Ensure ideas directly address the needs, questions, and interests of the {{targetAudience}}.
      *   For prospective students: Focus on program benefits, campus life, career outcomes.
      *   For parents: Address concerns about safety, quality of education, student support.
      *   For current students: Highlight resources, events, community building.
  3.  **Highlight Strengths:** Incorporate {{uniqueSellingPoints}} and specific {{programsOffered}} into the ideas.
  4.  **Actionable & Practical:** Ideas should be specific enough to be actionable. Avoid overly generic suggestions.
  5.  **Engagement Focus:** Aim for ideas that encourage interaction, discussion, or sharing.
  6.  **Output:** Provide a list of distinct content idea strings in the array. Aim for a list of up to 10 diverse ideas.
      Example idea: "Create a 'Myth vs. Fact' short video series about [Specific Program/Aspect of Institution] relevant to {{targetAudience}}."
      Example idea: "Develop an infographic showcasing the success rates and career placements of graduates from our {{programsOffered}}."
  `,
});

const generateContentIdeasFlow = ai.defineFlow(
  {
    name: 'generateContentIdeasFlow',
    inputSchema: GenerateContentIdeasInputSchema,
    outputSchema: GenerateContentIdeasOutputSchema, // Flow output schema includes status
  },
  async (input): Promise<GenerateContentIdeasOutput> => {
    const {output} = await prompt(input);
    if (output && output.contentIdeas) {
      let ideasWithStatus: ContentIdeaWithStatus[] = output.contentIdeas.map((ideaText) => ({
        id: crypto.randomUUID(),
        text: ideaText,
        status: 'pending' as Status,
        expandedDetails: undefined,
        isExpanding: false,
      }));
      if (ideasWithStatus.length > 10) {
        ideasWithStatus = ideasWithStatus.slice(0, 10); 
      }
      return { contentIdeas: ideasWithStatus };
    }
    return { contentIdeas: [] }; // Fallback or error case
  }
);
