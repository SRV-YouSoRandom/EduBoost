// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Generates content ideas for educational institutions based on user input.
 *
 * - generateContentIdeas - A function that generates content ideas.
 * - GenerateContentIdeasInput - The input type for the generateContentIdeas function.
 * - GenerateContentIdeasOutput - The return type for the generateContentIdeas function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import type { Status } from '@/types/common'; // Import Status type

const GenerateContentIdeasInputSchema = z.object({
  institutionName: z.string().describe('The name of the educational institution.'),
  institutionType: z
    .string()
    .describe(
      'The type of educational institution (e.g., university, high school, elementary school).' 
    ),
  targetAudience: z
    .string()
    .describe(
      'The target audience for the content (e.g., prospective students, current students, parents, faculty).' 
    ),
  programsOffered: z
    .string()
    .describe('A description of the programs offered by the institution.'),
  uniqueSellingPoints: z
    .string()
    .describe('The unique selling points of the educational institution.'),
});
export type GenerateContentIdeasInput = z.infer<
  typeof GenerateContentIdeasInputSchema
>;

const ContentIdeaWithStatusSchema = z.object({
  id: z.string().describe('Unique identifier for the content idea.'),
  text: z.string().describe('The content idea text.'),
  status: z.enum(['pending', 'inProgress', 'done', 'rejected']).default('pending' as Status).describe('The status of the content idea.'),
  expandedDetails: z.string().optional().describe('Generated detailed script or explanation for the content idea.'),
  isExpanding: z.boolean().optional().describe('Flag to indicate if details are currently being expanded for this idea.'),
});
export type ContentIdeaWithStatus = z.infer<typeof ContentIdeaWithStatusSchema>;

const GenerateContentIdeasOutputSchema = z.object({
  contentIdeas: z
    .array(ContentIdeaWithStatusSchema)
    .describe('A list of content ideas tailored to the educational institution, each with an ID and status.'),
});
export type GenerateContentIdeasOutput = z.infer<
  typeof GenerateContentIdeasOutputSchema
>;

export async function generateContentIdeas(
  input: GenerateContentIdeasInput
): Promise<GenerateContentIdeasOutput> {
  return generateContentIdeasFlow(input);
}

// Prompt output schema remains as array of strings
const PromptOutputSchema = z.object({
  contentIdeas: z.array(z.string()).describe('A list of content idea strings.'),
});

const prompt = ai.definePrompt({
  name: 'generateContentIdeasPrompt',
  input: {schema: GenerateContentIdeasInputSchema},
  output: {schema: PromptOutputSchema}, // AI generates strings
  prompt: `You are a creative content strategist specializing in the educational sector. Generate content ideas for {{institutionName}}, a {{institutionType}}, targeting {{targetAudience}}. The institution offers the following programs: {{programsOffered}}. Its unique selling points are: {{uniqueSellingPoints}}. Please provide a list of content ideas that will resonate with the target audience. Ensure each idea is a distinct string in the array.`,
});

const generateContentIdeasFlow = ai.defineFlow(
  {
    name: 'generateContentIdeasFlow',
    inputSchema: GenerateContentIdeasInputSchema,
    outputSchema: GenerateContentIdeasOutputSchema, // Flow output schema includes status
  },
  async (input): Promise<GenerateContentIdeasOutput> => {
    const {output} = await prompt(input);
    if (output && output.contentIdeas) {
      const ideasWithStatus: ContentIdeaWithStatus[] = output.contentIdeas.map((ideaText) => ({
        id: crypto.randomUUID(),
        text: ideaText,
        status: 'pending' as Status,
        expandedDetails: undefined,
        isExpanding: false,
      }));
      return { contentIdeas: ideasWithStatus };
    }
    return { contentIdeas: [] }; // Fallback or error case
  }
);

